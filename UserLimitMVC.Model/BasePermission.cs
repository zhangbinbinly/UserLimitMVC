//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace UserLimitMVC.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(R_Role_Permission))]
    [KnownType(typeof(R_User_Permission))]
    public partial class BasePermission: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    OnPropertyChanged("Code");
                }
            }
        }
        private string _code;
    
        [DataMember]
        public string RequestURL
        {
            get { return _requestURL; }
            set
            {
                if (_requestURL != value)
                {
                    _requestURL = value;
                    OnPropertyChanged("RequestURL");
                }
            }
        }
        private string _requestURL;
    
        [DataMember]
        public Nullable<int> RequestHttpType
        {
            get { return _requestHttpType; }
            set
            {
                if (_requestHttpType != value)
                {
                    _requestHttpType = value;
                    OnPropertyChanged("RequestHttpType");
                }
            }
        }
        private Nullable<int> _requestHttpType;
    
        [DataMember]
        public string PerMission
        {
            get { return _perMission; }
            set
            {
                if (_perMission != value)
                {
                    _perMission = value;
                    OnPropertyChanged("PerMission");
                }
            }
        }
        private string _perMission;
    
        [DataMember]
        public Nullable<int> AllowEdit
        {
            get { return _allowEdit; }
            set
            {
                if (_allowEdit != value)
                {
                    _allowEdit = value;
                    OnPropertyChanged("AllowEdit");
                }
            }
        }
        private Nullable<int> _allowEdit;
    
        [DataMember]
        public Nullable<int> AllowDelete
        {
            get { return _allowDelete; }
            set
            {
                if (_allowDelete != value)
                {
                    _allowDelete = value;
                    OnPropertyChanged("AllowDelete");
                }
            }
        }
        private Nullable<int> _allowDelete;
    
        [DataMember]
        public Nullable<int> IsVisible
        {
            get { return _isVisible; }
            set
            {
                if (_isVisible != value)
                {
                    _isVisible = value;
                    OnPropertyChanged("IsVisible");
                }
            }
        }
        private Nullable<int> _isVisible;
    
        [DataMember]
        public Nullable<int> SortCode
        {
            get { return _sortCode; }
            set
            {
                if (_sortCode != value)
                {
                    _sortCode = value;
                    OnPropertyChanged("SortCode");
                }
            }
        }
        private Nullable<int> _sortCode;
    
        [DataMember]
        public Nullable<short> DeletionStateCode
        {
            get { return _deletionStateCode; }
            set
            {
                if (_deletionStateCode != value)
                {
                    _deletionStateCode = value;
                    OnPropertyChanged("DeletionStateCode");
                }
            }
        }
        private Nullable<short> _deletionStateCode;
    
        [DataMember]
        public Nullable<int> Enabled
        {
            get { return _enabled; }
            set
            {
                if (_enabled != value)
                {
                    _enabled = value;
                    OnPropertyChanged("Enabled");
                }
            }
        }
        private Nullable<int> _enabled;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<System.DateTime> CreateOn
        {
            get { return _createOn; }
            set
            {
                if (_createOn != value)
                {
                    _createOn = value;
                    OnPropertyChanged("CreateOn");
                }
            }
        }
        private Nullable<System.DateTime> _createOn;
    
        [DataMember]
        public string CreateUserID
        {
            get { return _createUserID; }
            set
            {
                if (_createUserID != value)
                {
                    _createUserID = value;
                    OnPropertyChanged("CreateUserID");
                }
            }
        }
        private string _createUserID;
    
        [DataMember]
        public string CreateBy
        {
            get { return _createBy; }
            set
            {
                if (_createBy != value)
                {
                    _createBy = value;
                    OnPropertyChanged("CreateBy");
                }
            }
        }
        private string _createBy;
    
        [DataMember]
        public Nullable<System.DateTime> ModifiedOn
        {
            get { return _modifiedOn; }
            set
            {
                if (_modifiedOn != value)
                {
                    _modifiedOn = value;
                    OnPropertyChanged("ModifiedOn");
                }
            }
        }
        private Nullable<System.DateTime> _modifiedOn;
    
        [DataMember]
        public string ModifiedUserID
        {
            get { return _modifiedUserID; }
            set
            {
                if (_modifiedUserID != value)
                {
                    _modifiedUserID = value;
                    OnPropertyChanged("ModifiedUserID");
                }
            }
        }
        private string _modifiedUserID;
    
        [DataMember]
        public string ModifiedBy
        {
            get { return _modifiedBy; }
            set
            {
                if (_modifiedBy != value)
                {
                    _modifiedBy = value;
                    OnPropertyChanged("ModifiedBy");
                }
            }
        }
        private string _modifiedBy;

        #endregion
        #region 导航属性
    
        [DataMember]
        public TrackableCollection<R_Role_Permission> R_Role_Permission
        {
            get
            {
                if (_r_Role_Permission == null)
                {
                    _r_Role_Permission = new TrackableCollection<R_Role_Permission>();
                    _r_Role_Permission.CollectionChanged += FixupR_Role_Permission;
                }
                return _r_Role_Permission;
            }
            set
            {
                if (!ReferenceEquals(_r_Role_Permission, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_r_Role_Permission != null)
                    {
                        _r_Role_Permission.CollectionChanged -= FixupR_Role_Permission;
                    }
                    _r_Role_Permission = value;
                    if (_r_Role_Permission != null)
                    {
                        _r_Role_Permission.CollectionChanged += FixupR_Role_Permission;
                    }
                    OnNavigationPropertyChanged("R_Role_Permission");
                }
            }
        }
        private TrackableCollection<R_Role_Permission> _r_Role_Permission;
    
        [DataMember]
        public TrackableCollection<R_User_Permission> R_User_Permission
        {
            get
            {
                if (_r_User_Permission == null)
                {
                    _r_User_Permission = new TrackableCollection<R_User_Permission>();
                    _r_User_Permission.CollectionChanged += FixupR_User_Permission;
                }
                return _r_User_Permission;
            }
            set
            {
                if (!ReferenceEquals(_r_User_Permission, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_r_User_Permission != null)
                    {
                        _r_User_Permission.CollectionChanged -= FixupR_User_Permission;
                    }
                    _r_User_Permission = value;
                    if (_r_User_Permission != null)
                    {
                        _r_User_Permission.CollectionChanged += FixupR_User_Permission;
                    }
                    OnNavigationPropertyChanged("R_User_Permission");
                }
            }
        }
        private TrackableCollection<R_User_Permission> _r_User_Permission;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            R_Role_Permission.Clear();
            R_User_Permission.Clear();
        }

        #endregion
        #region 关联修复
    
        private void FixupR_Role_Permission(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_Role_Permission item in e.NewItems)
                {
                    item.BasePermission = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_Role_Permission", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_Role_Permission item in e.OldItems)
                {
                    if (ReferenceEquals(item.BasePermission, this))
                    {
                        item.BasePermission = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_Role_Permission", item);
                    }
                }
            }
        }
    
        private void FixupR_User_Permission(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_User_Permission item in e.NewItems)
                {
                    item.BasePermission = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_User_Permission", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_User_Permission item in e.OldItems)
                {
                    if (ReferenceEquals(item.BasePermission, this))
                    {
                        item.BasePermission = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_User_Permission", item);
                    }
                }
            }
        }

        #endregion
    }
}
