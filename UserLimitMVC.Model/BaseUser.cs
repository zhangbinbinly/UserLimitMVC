//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace UserLimitMVC.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(R_User_Permission))]
    [KnownType(typeof(R_User_Role))]
    public partial class BaseUser: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    OnPropertyChanged("Code");
                }
            }
        }
        private string _code;
    
        [DataMember]
        public string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        private string _userName;
    
        [DataMember]
        public string UserPassword
        {
            get { return _userPassword; }
            set
            {
                if (_userPassword != value)
                {
                    _userPassword = value;
                    OnPropertyChanged("UserPassword");
                }
            }
        }
        private string _userPassword;
    
        [DataMember]
        public string RealName
        {
            get { return _realName; }
            set
            {
                if (_realName != value)
                {
                    _realName = value;
                    OnPropertyChanged("RealName");
                }
            }
        }
        private string _realName;
    
        [DataMember]
        public string QuickQuery
        {
            get { return _quickQuery; }
            set
            {
                if (_quickQuery != value)
                {
                    _quickQuery = value;
                    OnPropertyChanged("QuickQuery");
                }
            }
        }
        private string _quickQuery;
    
        [DataMember]
        public Nullable<int> SecurityLevel
        {
            get { return _securityLevel; }
            set
            {
                if (_securityLevel != value)
                {
                    _securityLevel = value;
                    OnPropertyChanged("SecurityLevel");
                }
            }
        }
        private Nullable<int> _securityLevel;
    
        [DataMember]
        public string UserFrom
        {
            get { return _userFrom; }
            set
            {
                if (_userFrom != value)
                {
                    _userFrom = value;
                    OnPropertyChanged("UserFrom");
                }
            }
        }
        private string _userFrom;
    
        [DataMember]
        public Nullable<int> CompanyID
        {
            get { return _companyID; }
            set
            {
                if (_companyID != value)
                {
                    _companyID = value;
                    OnPropertyChanged("CompanyID");
                }
            }
        }
        private Nullable<int> _companyID;
    
        [DataMember]
        public string CompanyName
        {
            get { return _companyName; }
            set
            {
                if (_companyName != value)
                {
                    _companyName = value;
                    OnPropertyChanged("CompanyName");
                }
            }
        }
        private string _companyName;
    
        [DataMember]
        public Nullable<int> SubCompanyID
        {
            get { return _subCompanyID; }
            set
            {
                if (_subCompanyID != value)
                {
                    _subCompanyID = value;
                    OnPropertyChanged("SubCompanyID");
                }
            }
        }
        private Nullable<int> _subCompanyID;
    
        [DataMember]
        public string SubCompanyName
        {
            get { return _subCompanyName; }
            set
            {
                if (_subCompanyName != value)
                {
                    _subCompanyName = value;
                    OnPropertyChanged("SubCompanyName");
                }
            }
        }
        private string _subCompanyName;
    
        [DataMember]
        public Nullable<int> DepartmentID
        {
            get { return _departmentID; }
            set
            {
                if (_departmentID != value)
                {
                    _departmentID = value;
                    OnPropertyChanged("DepartmentID");
                }
            }
        }
        private Nullable<int> _departmentID;
    
        [DataMember]
        public string DepartmentName
        {
            get { return _departmentName; }
            set
            {
                if (_departmentName != value)
                {
                    _departmentName = value;
                    OnPropertyChanged("DepartmentName");
                }
            }
        }
        private string _departmentName;
    
        [DataMember]
        public Nullable<int> WorkgroupID
        {
            get { return _workgroupID; }
            set
            {
                if (_workgroupID != value)
                {
                    _workgroupID = value;
                    OnPropertyChanged("WorkgroupID");
                }
            }
        }
        private Nullable<int> _workgroupID;
    
        [DataMember]
        public string WorkgroupName
        {
            get { return _workgroupName; }
            set
            {
                if (_workgroupName != value)
                {
                    _workgroupName = value;
                    OnPropertyChanged("WorkgroupName");
                }
            }
        }
        private string _workgroupName;
    
        [DataMember]
        public string WorkCategory
        {
            get { return _workCategory; }
            set
            {
                if (_workCategory != value)
                {
                    _workCategory = value;
                    OnPropertyChanged("WorkCategory");
                }
            }
        }
        private string _workCategory;
    
        [DataMember]
        public Nullable<System.DateTime> ChangePasswordDate
        {
            get { return _changePasswordDate; }
            set
            {
                if (_changePasswordDate != value)
                {
                    _changePasswordDate = value;
                    OnPropertyChanged("ChangePasswordDate");
                }
            }
        }
        private Nullable<System.DateTime> _changePasswordDate;
    
        [DataMember]
        public string Duty
        {
            get { return _duty; }
            set
            {
                if (_duty != value)
                {
                    _duty = value;
                    OnPropertyChanged("Duty");
                }
            }
        }
        private string _duty;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string Lang
        {
            get { return _lang; }
            set
            {
                if (_lang != value)
                {
                    _lang = value;
                    OnPropertyChanged("Lang");
                }
            }
        }
        private string _lang;
    
        [DataMember]
        public string Gender
        {
            get { return _gender; }
            set
            {
                if (_gender != value)
                {
                    _gender = value;
                    OnPropertyChanged("Gender");
                }
            }
        }
        private string _gender;
    
        [DataMember]
        public string Birthday
        {
            get { return _birthday; }
            set
            {
                if (_birthday != value)
                {
                    _birthday = value;
                    OnPropertyChanged("Birthday");
                }
            }
        }
        private string _birthday;
    
        [DataMember]
        public string Mobile
        {
            get { return _mobile; }
            set
            {
                if (_mobile != value)
                {
                    _mobile = value;
                    OnPropertyChanged("Mobile");
                }
            }
        }
        private string _mobile;
    
        [DataMember]
        public string Telephone
        {
            get { return _telephone; }
            set
            {
                if (_telephone != value)
                {
                    _telephone = value;
                    OnPropertyChanged("Telephone");
                }
            }
        }
        private string _telephone;
    
        [DataMember]
        public string QICQ
        {
            get { return _qICQ; }
            set
            {
                if (_qICQ != value)
                {
                    _qICQ = value;
                    OnPropertyChanged("QICQ");
                }
            }
        }
        private string _qICQ;
    
        [DataMember]
        public string HomeAddress
        {
            get { return _homeAddress; }
            set
            {
                if (_homeAddress != value)
                {
                    _homeAddress = value;
                    OnPropertyChanged("HomeAddress");
                }
            }
        }
        private string _homeAddress;
    
        [DataMember]
        public string Theme
        {
            get { return _theme; }
            set
            {
                if (_theme != value)
                {
                    _theme = value;
                    OnPropertyChanged("Theme");
                }
            }
        }
        private string _theme;
    
        [DataMember]
        public Nullable<int> IsStaff
        {
            get { return _isStaff; }
            set
            {
                if (_isStaff != value)
                {
                    _isStaff = value;
                    OnPropertyChanged("IsStaff");
                }
            }
        }
        private Nullable<int> _isStaff;
    
        [DataMember]
        public Nullable<int> IsVisible
        {
            get { return _isVisible; }
            set
            {
                if (_isVisible != value)
                {
                    _isVisible = value;
                    OnPropertyChanged("IsVisible");
                }
            }
        }
        private Nullable<int> _isVisible;
    
        [DataMember]
        public string UserAddRessID
        {
            get { return _userAddRessID; }
            set
            {
                if (_userAddRessID != value)
                {
                    _userAddRessID = value;
                    OnPropertyChanged("UserAddRessID");
                }
            }
        }
        private string _userAddRessID;
    
        [DataMember]
        public Nullable<int> Enabled
        {
            get { return _enabled; }
            set
            {
                if (_enabled != value)
                {
                    _enabled = value;
                    OnPropertyChanged("Enabled");
                }
            }
        }
        private Nullable<int> _enabled;
    
        [DataMember]
        public string AuditStatus
        {
            get { return _auditStatus; }
            set
            {
                if (_auditStatus != value)
                {
                    _auditStatus = value;
                    OnPropertyChanged("AuditStatus");
                }
            }
        }
        private string _auditStatus;
    
        [DataMember]
        public Nullable<int> DeletionStateCode
        {
            get { return _deletionStateCode; }
            set
            {
                if (_deletionStateCode != value)
                {
                    _deletionStateCode = value;
                    OnPropertyChanged("DeletionStateCode");
                }
            }
        }
        private Nullable<int> _deletionStateCode;
    
        [DataMember]
        public string Signature
        {
            get { return _signature; }
            set
            {
                if (_signature != value)
                {
                    _signature = value;
                    OnPropertyChanged("Signature");
                }
            }
        }
        private string _signature;
    
        [DataMember]
        public Nullable<int> SortCode
        {
            get { return _sortCode; }
            set
            {
                if (_sortCode != value)
                {
                    _sortCode = value;
                    OnPropertyChanged("SortCode");
                }
            }
        }
        private Nullable<int> _sortCode;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<System.DateTime> CreateOn
        {
            get { return _createOn; }
            set
            {
                if (_createOn != value)
                {
                    _createOn = value;
                    OnPropertyChanged("CreateOn");
                }
            }
        }
        private Nullable<System.DateTime> _createOn;
    
        [DataMember]
        public string CreateUserID
        {
            get { return _createUserID; }
            set
            {
                if (_createUserID != value)
                {
                    _createUserID = value;
                    OnPropertyChanged("CreateUserID");
                }
            }
        }
        private string _createUserID;
    
        [DataMember]
        public string CreateBy
        {
            get { return _createBy; }
            set
            {
                if (_createBy != value)
                {
                    _createBy = value;
                    OnPropertyChanged("CreateBy");
                }
            }
        }
        private string _createBy;
    
        [DataMember]
        public Nullable<System.DateTime> ModifirdOn
        {
            get { return _modifirdOn; }
            set
            {
                if (_modifirdOn != value)
                {
                    _modifirdOn = value;
                    OnPropertyChanged("ModifirdOn");
                }
            }
        }
        private Nullable<System.DateTime> _modifirdOn;
    
        [DataMember]
        public string ModifiedUserID
        {
            get { return _modifiedUserID; }
            set
            {
                if (_modifiedUserID != value)
                {
                    _modifiedUserID = value;
                    OnPropertyChanged("ModifiedUserID");
                }
            }
        }
        private string _modifiedUserID;
    
        [DataMember]
        public string ModifiedBy
        {
            get { return _modifiedBy; }
            set
            {
                if (_modifiedBy != value)
                {
                    _modifiedBy = value;
                    OnPropertyChanged("ModifiedBy");
                }
            }
        }
        private string _modifiedBy;

        #endregion
        #region 导航属性
    
        [DataMember]
        public TrackableCollection<R_User_Permission> R_User_Permission
        {
            get
            {
                if (_r_User_Permission == null)
                {
                    _r_User_Permission = new TrackableCollection<R_User_Permission>();
                    _r_User_Permission.CollectionChanged += FixupR_User_Permission;
                }
                return _r_User_Permission;
            }
            set
            {
                if (!ReferenceEquals(_r_User_Permission, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_r_User_Permission != null)
                    {
                        _r_User_Permission.CollectionChanged -= FixupR_User_Permission;
                    }
                    _r_User_Permission = value;
                    if (_r_User_Permission != null)
                    {
                        _r_User_Permission.CollectionChanged += FixupR_User_Permission;
                    }
                    OnNavigationPropertyChanged("R_User_Permission");
                }
            }
        }
        private TrackableCollection<R_User_Permission> _r_User_Permission;
    
        [DataMember]
        public TrackableCollection<R_User_Role> R_User_Role
        {
            get
            {
                if (_r_User_Role == null)
                {
                    _r_User_Role = new TrackableCollection<R_User_Role>();
                    _r_User_Role.CollectionChanged += FixupR_User_Role;
                }
                return _r_User_Role;
            }
            set
            {
                if (!ReferenceEquals(_r_User_Role, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_r_User_Role != null)
                    {
                        _r_User_Role.CollectionChanged -= FixupR_User_Role;
                    }
                    _r_User_Role = value;
                    if (_r_User_Role != null)
                    {
                        _r_User_Role.CollectionChanged += FixupR_User_Role;
                    }
                    OnNavigationPropertyChanged("R_User_Role");
                }
            }
        }
        private TrackableCollection<R_User_Role> _r_User_Role;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            R_User_Permission.Clear();
            R_User_Role.Clear();
        }

        #endregion
        #region 关联修复
    
        private void FixupR_User_Permission(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_User_Permission item in e.NewItems)
                {
                    item.BaseUser = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_User_Permission", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_User_Permission item in e.OldItems)
                {
                    if (ReferenceEquals(item.BaseUser, this))
                    {
                        item.BaseUser = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_User_Permission", item);
                    }
                }
            }
        }
    
        private void FixupR_User_Role(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (R_User_Role item in e.NewItems)
                {
                    item.BaseUser = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("R_User_Role", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (R_User_Role item in e.OldItems)
                {
                    if (ReferenceEquals(item.BaseUser, this))
                    {
                        item.BaseUser = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("R_User_Role", item);
                    }
                }
            }
        }

        #endregion
    }
}
